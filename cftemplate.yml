AWSTemplateFormatVersion: 2010-09-09

Parameters:
  EnvironmentName:
      Description: An environment name that will be used in front of some other resource names
      Type: String
  MyVpcCIDR: 
      Type: String

  PublicSubnet1CIDR:
      Description: IP range (CIDR notation) for the public subnet in the first Availability Zone
      Type: String

  PublicSubnet2CIDR:
      Description: IP range (CIDR notation) for the public subnet in the second Availability Zone
      Type: String

  PublicSubnet3CIDR:
      Description: IP range (CIDR notation) for the public subnet in the third Availability Zone
      Type: String

  PrivateSubnet1CIDR:
      Description: IP range (CIDR notation) for the private subnet in the first Availability Zone
      Type: String

  PrivateSubnet2CIDR:
      Description: IP range (CIDR notation) for the private subnet in the second Availability Zone
      Type: String

  PrivateSubnet3CIDR:
      Description: IP range (CIDR notation) for the private subnet in the third Availability Zone
      Type: String

Mappings:
  RegionMap:
    us-east-1:
     "AMI": "ami-0742b4e673072066f"
    us-west-2:
     "AMI": "ami-0518bb0e75d3619ca"

Resources:
  VPC: 
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref MyVpcCIDR
      EnableDnsHostnames: true
      Tags: 
        - Key: Name 
          Value: !Ref EnvironmentName
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
        Tags:
            - Key: Name
              Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
        InternetGatewayId: !Ref InternetGateway
        VpcId: !Ref VPC

  PublicSubnet1: 
      Type: AWS::EC2::Subnet
      Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select [ 0, !GetAZs '' ]
          CidrBlock: !Ref PublicSubnet1CIDR
          MapPublicIpOnLaunch: true
          Tags: 
              - Key: Name 
                Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PublicSubnet2: 
      Type: AWS::EC2::Subnet
      Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select [ 1, !GetAZs '' ]
          CidrBlock: !Ref PublicSubnet2CIDR
          MapPublicIpOnLaunch: true
          Tags: 
              - Key: Name 
                Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

  PublicSubnet3: 
      Type: AWS::EC2::Subnet
      Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select [ 2, !GetAZs '' ]
          CidrBlock: !Ref PublicSubnet3CIDR
          MapPublicIpOnLaunch: true
          Tags: 
              - Key: Name 
                Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

  PrivateSubnet1: 
      Type: AWS::EC2::Subnet
      Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select [ 0, !GetAZs '' ]
          CidrBlock: !Ref PrivateSubnet1CIDR
          MapPublicIpOnLaunch: false
          Tags: 
              - Key: Name 
                Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

  PrivateSubnet2: 
      Type: AWS::EC2::Subnet
      Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select [ 1, !GetAZs '' ]
          CidrBlock: !Ref PrivateSubnet2CIDR
          MapPublicIpOnLaunch: false
          Tags: 
              - Key: Name 
                Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

  PrivateSubnet3: 
      Type: AWS::EC2::Subnet
      Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select [ 2, !GetAZs '' ]
          CidrBlock: !Ref PrivateSubnet3CIDR
          MapPublicIpOnLaunch: false
          Tags: 
              - Key: Name 
                Value: !Sub ${EnvironmentName} Private Subnet (AZ2)
  # InternetGateway:
  #   Type: AWS::EC2::InternetGateway
  #   Properties:
  #       Tags:
  #           - Key: Name
  #             Value: !Ref EnvironmentName
            
  # InternetGatewayAttachment:
  #   Type: AWS::EC2::VPCGatewayAttachment
  #   Properties:
  #       InternetGatewayId: !Ref InternetGateway
  #       VpcId: !Ref VPC
  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties: 
        Domain: vpc

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
        Domain: vpc

  NatGateway3EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
        Domain: vpc

  NatGateway1: 
    Type: AWS::EC2::NatGateway
    Properties: 
        AllocationId: !GetAtt NatGateway1EIP.AllocationId
        SubnetId: !Ref PrivateSubnet1

  NatGateway2: 
    Type: AWS::EC2::NatGateway
    Properties:
        AllocationId: !GetAtt NatGateway2EIP.AllocationId
        SubnetId: !Ref PrivateSubnet2

  NatGateway3: 
    Type: AWS::EC2::NatGateway
    Properties:
        AllocationId: !GetAtt NatGateway3EIP.AllocationId
        SubnetId: !Ref PrivateSubnet3

  PrivateRouteTable1:
      Type: AWS::EC2::RouteTable
      Properties: 
          VpcId: !Ref VPC
          Tags: 
              - Key: Name 
                Value: !Sub ${EnvironmentName} Private Routes (AZ1)

  DefaultPrivateRoute1:
      Type: AWS::EC2::Route
      Properties:
          RouteTableId: !Ref PrivateRouteTable1
          DestinationCidrBlock: 0.0.0.0/0
          NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref PrivateRouteTable1
          SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
      Type: AWS::EC2::RouteTable
      Properties: 
          VpcId: !Ref VPC
          Tags: 
              - Key: Name 
                Value: !Sub ${EnvironmentName} Private Routes (AZ2)

  DefaultPrivateRoute2:
      Type: AWS::EC2::Route
      Properties:
          RouteTableId: !Ref PrivateRouteTable2
          DestinationCidrBlock: 0.0.0.0/0
          NatGatewayId: !Ref NatGateway2

  PrivateSubnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref PrivateRouteTable2
          SubnetId: !Ref PrivateSubnet2

  PrivateRouteTable3:
      Type: AWS::EC2::RouteTable
      Properties: 
          VpcId: !Ref VPC
          Tags: 
              - Key: Name 
                Value: !Sub ${EnvironmentName} Private Routes (AZ2)


  DefaultPrivateRoute3:
      Type: AWS::EC2::Route
      Properties:
          RouteTableId: !Ref PrivateRouteTable3
          DestinationCidrBlock: 0.0.0.0/0
          NatGatewayId: !Ref NatGateway3

  PrivateSubnet3RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref PrivateRouteTable3
          SubnetId: !Ref PrivateSubnet3

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
        VpcId: !Ref VPC
        Tags: 
            - Key: Name 
              Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute: 
      Type: AWS::EC2::Route
      DependsOn: InternetGatewayAttachment
      Properties: 
          RouteTableId: !Ref PublicRouteTable
          DestinationCidrBlock: 0.0.0.0/0
          GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref PublicRouteTable
          SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref PublicRouteTable
          SubnetId: !Ref PublicSubnet2

  PublicSubnet3RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref PublicRouteTable
          SubnetId: !Ref PublicSubnet3

  
  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our load balancer
      VpcId:
        !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our hosts and SSH from local only
      VpcId:
        !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - !Ref PublicSubnet1
      - !Ref PublicSubnet2
      - !Ref PublicSubnet3
      SecurityGroups:
      - Ref: LBSecGroup

  WebAppInstance1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      InstanceType: t2.micro
      SubnetId: !Ref PrivateSubnet1
      SecurityGroupIds: 
        - !Ref WebServerSecGroup
      Tags:
       - Key: Name
         Value: EC2 Instance One     
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash
            yum install httpd -y
            service httpd start  
            echo "<html><body><h1>Hello from Instance 1 Region ${AWS::Region}<h1></body></html>" > /var/www/html/index.html

  WebAppInstance2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      InstanceType: t2.micro
      SubnetId: !Ref PrivateSubnet2
      SecurityGroupIds: 
        - !Ref WebServerSecGroup
      Tags:
       - Key: Name
         Value: EC2 Instance Two   
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash
            yum install httpd -y
            service httpd start  
            echo "<html><body><h1>Hello from Instance 2 Region ${AWS::Region}<h1></body></html>" > /var/www/html/index.html

  WebAppInstance3:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      InstanceType: t2.micro
      SubnetId: !Ref PrivateSubnet3
      SecurityGroupIds: 
        - !Ref WebServerSecGroup
      Tags:
       - Key: Name
         Value: EC2 Instance Three    
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash
            yum install httpd -y
            service httpd start  
            echo "<html><body><h1>Hello from Instance 3 Region ${AWS::Region}<h1></body></html>" > /var/www/html/index.html
# Outputs:
#   PublicIp1:
#     Description: EC2 Instance Public Ip
#     Value: !GetAtt WebAppInstance1.PublicIp
#   PublicIp2:
#     Description: EC2 Instance Public Ip
#     Value: !GetAtt WebAppInstance1.PublicIp
#   PublicIp3:
#     Description: EC2 Instance Public Ip
#     Value: !GetAtt WebAppInstance1.PublicIp
    
  # EC2SecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupDescription: "ec2 security group"
  #     SecurityGroupIngress:
  #     - IpProtocol: tcp
  #       FromPort: '80'
  #       ToPort: '80'
  #       CidrIp: 0.0.0.0/0
  #       # SourceSecurityGroupId: 
  #       #   Fn::GetAtt:
  #       #   - LBSecGroup
  #       #   - GroupId
  #     - IpProtocol: tcp
  #       FromPort: '22'
  #       ToPort: '22'
  #       CidrIp: 0.0.0.0/0
  # WebAppInstance1:
  #   Type: AWS::EC2::Instance
  #   Properties:
  #     AvailabilityZone: !Select [ 0, !GetAZs '' ]
  #     ImageId: ami-1ecae776
  #     InstanceType: t2.micro
  #     SecurityGroups:
  #       - !Ref EC2SecurityGroup
  #     # KeyName: !Ref KeyName
  #     UserData: 
  #       Fn::Base64: !Sub |
  #         #!/bin/bash
  #         apt-get update -y
  #         apt-get install apache2 -y
  #         systemctl start apache2.service
  #         cd /var/www/html
  #         echo "Demo Web Server Up and Running!" > index.html
  # WebAppInstance2:
  #   Type: AWS::EC2::Instance
  #   Properties:
  #     AvailabilityZone: !Select [ 1, !GetAZs '' ]
  #     ImageId: ami-1ecae776  
  #     InstanceType: t2.micro
  #     SecurityGroups:
  #       - !Ref EC2SecurityGroup
  #     # KeyName: !Ref KeyName
  #     UserData: 
  #       Fn::Base64: !Sub |
  #         #!/bin/bash
  #         apt-get update -y
  #         apt-get install apache2 -y
  #         systemctl start apache2.service
  #         cd /var/www/html
  #         echo "Demo Web Server Up and Running!" > index.html
  # WebAppInstance3:
  #   Type: AWS::EC2::Instance
  #   Properties:
  #     AvailabilityZone: !Select [ 2, !GetAZs '' ]
  #     ImageId: ami-1ecae776
  #     InstanceType: t2.micro
  #     SecurityGroups:
  #       - !Ref EC2SecurityGroup
  #     # KeyName: !Ref KeyName
  #     UserData: 
  #       Fn::Base64: !Sub |
  #         #!/bin/bash
  #         apt-get update -y
  #         apt-get install apache2 -y
  #         systemctl start apache2.service
  #         cd /var/www/html
  #         echo "Demo Web Server Up and Running!" > index.html

  
  